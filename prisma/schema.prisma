generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  password_reset_required Boolean @default(true)
  created_at DateTime @default(now())
  orders    Order[]
  addresses Address[]
  paymentMethods PaymentMethod[]
  notifications Notification[]
  instagramName String? // Instagram name, optional (for backward compatibility)
  instagramNames String? // Multiple Instagram names as JSON string
  userEmail String? // User email for notifications, optional
  
  @@map("users") // This maps the Prisma model User to the actual table "users"
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [user_id], references: [id])
  user_id          Int
  status          String      @default("pending")
  address_nome    String
  address_morada  String
  address_cidade  String
  address_distrito String
  address_pais    String
  address_codigo_postal String
  address_telemovel String
  created_at       DateTime    @default(now())
  total_price     Float       @default(0)
  items           OrderItem[]
  proofReference  String?     // Payment reference (nullable)
  paymentMethod   String?     // Payment method: Revolut, PayPal, Bank Transfer
  paymentRecipient String?    // Payment recipient name (e.g., MIGUEL, HUGO)
  paymentAccountInfo String?  // Payment account details (e.g., Revolut - 12312)
  proofImage      String? 
  trackingText    String?     // Tracking information text
  trackingImages  String[]    // Array of tracking image URLs
  trackingVideos  String[]    // Array of tracking video URLs
  clientInstagram String?     // Instagram do cliente específico desta encomenda

  @@map("orders") // This maps the Prisma model Order to the actual table "orders"
}

model OrderItem {
  id            Int        @id @default(autoincrement())
  order         Order      @relation(fields: [order_id], references: [id])
  order_id      Int
  product_type  String
  image_front   String?
  image_back    String?
  size          String
  quantity      Int        @default(1)
  player_name   String?
  shirt_type_id Int?
  shirtType     ShirtType? @relation(fields: [shirt_type_id], references: [id])
  product_id    Int?
  product       Product?   @relation(fields: [product_id], references: [id])
  sexo          String?
  ano           String?
  numero        String?
  patch_images  String[]   // NEW: multiple patch images
  anuncios      Boolean?
  cost_price    Float?

  @@map("orderitems")
}

model Pack {
  id          Int        @id @default(autoincrement())
  name        String
  price       Float
  cost_price  Float? @default(0)
  created_at  DateTime   @default(now())
  items       PackItem[]

  @@map("packs")
}

model PackItem {
  id            Int      @id @default(autoincrement())
  pack          Pack     @relation(fields: [pack_id], references: [id])
  pack_id       Int
  product_type  String
  quantity      Int
  shirt_type_id Int?
  shirtType     ShirtType? @relation(fields: [shirt_type_id], references: [id])

  @@map("packitems")
}

model ShirtType {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  price      Float
  cost_price Float? @default(0)
  packItems  PackItem[]
  orderItems OrderItem[]

  @@map("shirttypes")
}

model ProductType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  base_type String
  // Hierarchical product types (e.g., Country → Club → Season)
  parent_id Int?
  parent    ProductType? @relation("ProductTypeHierarchy", fields: [parent_id], references: [id])
  children  ProductType[] @relation("ProductTypeHierarchy")
  products  Product[]

  @@map("product_types")
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  cost_price      Float? @default(0)
  image_url       String
  available_sizes String[]
  productType     ProductType @relation(fields: [product_type_id], references: [id])
  product_type_id Int
  orderItems      OrderItem[]
  sexo            String      @default("Neutro")
  ano             String      @default("21/22")
  numero          String?

  @@map("products")
}

model Address {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  nome         String
  telemovel    String
  morada       String
  cidade       String
  distrito     String
  codigoPostal String
  pais         String  @default("Portugal")
}

model PaymentMethod {
  id              Int    @id @default(autoincrement())
  user            User   @relation(fields: [userId], references: [id])
  userId          Int
  name            String // Nome descritivo (ex: "Revolut Principal", "PayPal Pessoal")
  method          String // Tipo: "Revolut", "PayPal", "Bank Transfer"
  accountInfo     String // Informação da conta (número, email, etc.)
  isDefault       Boolean @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("payment_methods")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String   // 'payment_reminder', 'order_update', 'general'
  title     String
  message   String
  read      Boolean  @default(false)
  orderId   String?
  created_at DateTime @default(now())
  
  @@map("notifications")
}

model PricingConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  name        String
  price       Float    @default(0)
  cost_price  Float    @default(0)
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@map("pricing_config")
}

model Patch {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  price     Float?   @default(0)
  active    Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("patches")
}